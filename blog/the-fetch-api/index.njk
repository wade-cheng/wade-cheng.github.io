---
title: The Fetch API
tags: ["blog-post"]
date: 2025-10-27
description:
layout: "blog_post.njk"
---

<p>
    Javascript can pull data from remote servers by using something called the
    <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"
        >Fetch API</a
    >. This has a couple names and concepts associated to it, like fetching, GET
    requests, or REST APIs. The scope of this blog post will be to
</p>

<ul class="tight">
    <li>develop a simple example for how you can use it</li>
    <li>to fetch a binary file</li>
    <li>as part of a web application.</li>
</ul>

<p>I'll start with an empty folder to give us a clean workspace.</p>

<pre><code>~/fetch-example $ ls --all
. ..
</code></pre>

<p>
    First, we need some binary data. I'll choose some random numbers (that fit
    in the range of an unsigned byte), and we can later confirm we've
    successfully fetched the file by looking for those numbers. I'll use python
    to write the numbers to a file named <code>bin</code>, and double check it
    worked with <code>od</code>.
</p>

<pre><code>~/fetch-example $ python -c 'open("bin", "wb").write(bytearray([24, 100, 3, 1]))'
~/fetch-example $ od -td1 bin
0000000   24  100    3    1
0000004
</code></pre>

<p>
    Now, we need our "web application." Let's just have a single button, and
    when it's pressed, fetch <code>bin</code> and console-log its contents. I'm
    putting this HTML code into <code>~/fetch-example/index.html</code>:
</p>

<pre><code>&lt;script&gt;
    async function log_bin() {
        const response = await fetch('bin');
        const asbytes = await response.bytes(); 
        console.log(asbytes);
    }
&lt;/script&gt;

&lt;button onclick="log_bin()" /&gt;
</code></pre>

<p>Let's break down what this is doing.</p>

<p>
    We have a function <code>log_bin</code> to log the binary file. It starts to
    fetch the file <code>bin</code>, and awaits its completion. Then, we save
    that response as bytes, awaiting here as well. Since those
    <code>await</code>s are
    <a
        href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Async_JS/Introducing"
        >async code</a
    >, the function containing them (<code>log_bin</code>) must be marked
    <code>async</code> as well. Finally, we log the byte representation. The
    button just calls this function.
</p>

<p>
    This is our final code! Changing <code>'bin'</code> will let us fetch any
    data exposed through REST APIs or other HTTP GET calls. But to be able to
    test this locally, we need to pretend to be such a server. I prefer to spin
    up my local servers with python:
</p>

<pre><code>~/fetch-example $ python -m http.server
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
</code></pre>

<p>
    Now, visiting the link
    <a href="http://0.0.0.0:8000/">http://0.0.0.0:8000/</a> and clicking on the
    button logs the numbers from the start of the blog post. It works!
</p>

<img
    src="./output.png"
    alt="a screenshot of the button and a panel showing the output of the console log, which matches our chosen numbers from the start of the blog post"
/>

<h2>why is this helpful?</h2>

<p>
    I chose the specific scope of this article because I'm working on a project
    that plans to roughly follow the above workflow. We control both the client
    and the server. Some data structure is serialized into binary, and is saved
    on the server. The client requests it from the server, deserializes it, and
    uses it to do business logic.
</p>
